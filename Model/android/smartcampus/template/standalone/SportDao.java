package android.smartcampus.template.standalone;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import android.smartcampus.template.standalone.Sport;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SPORT.
*/
public class SportDao extends AbstractDao<Sport, String> {

    public static final String TABLENAME = "SPORT";

    /**
     * Properties of entity Sport.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Nome = new Property(0, String.class, "nome", true, "NOME");
        public final static Property Immagine = new Property(1, byte[].class, "immagine", false, "IMMAGINE");
        public final static Property Descrizione = new Property(2, String.class, "descrizione", false, "DESCRIZIONE");
    };


    public SportDao(DaoConfig config) {
        super(config);
    }
    
    public SportDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SPORT' (" + //
                "'NOME' TEXT PRIMARY KEY NOT NULL ," + // 0: nome
                "'IMMAGINE' BLOB," + // 1: immagine
                "'DESCRIZIONE' TEXT);"); // 2: descrizione
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SPORT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Sport entity) {
        stmt.clearBindings();
 
        String nome = entity.getNome();
        if (nome != null) {
            stmt.bindString(1, nome);
        }
 
        byte[] immagine = entity.getImmagine();
        if (immagine != null) {
            stmt.bindBlob(2, immagine);
        }
 
        String descrizione = entity.getDescrizione();
        if (descrizione != null) {
            stmt.bindString(3, descrizione);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Sport readEntity(Cursor cursor, int offset) {
        Sport entity = new Sport( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // nome
            cursor.isNull(offset + 1) ? null : cursor.getBlob(offset + 1), // immagine
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // descrizione
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Sport entity, int offset) {
        entity.setNome(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setImmagine(cursor.isNull(offset + 1) ? null : cursor.getBlob(offset + 1));
        entity.setDescrizione(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Sport entity, long rowId) {
        return entity.getNome();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Sport entity) {
        if(entity != null) {
            return entity.getNome();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
