package android.smartcampus.template.standalone;

import java.util.List;
import android.smartcampus.template.standalone.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table SPORT.
 */
public class Sport {

    private Long id;
    private Double latGPS;
    private Double lngGPS;
    private byte[] immagine;
    private String descrizione;
    private Long atleti;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SportDao myDao;

    private List<Atleta> atletaList;

    public Sport() {
    }

    public Sport(Long id) {
        this.id = id;
    }

    public Sport(Long id, Double latGPS, Double lngGPS, byte[] immagine, String descrizione, Long atleti) {
        this.id = id;
        this.latGPS = latGPS;
        this.lngGPS = lngGPS;
        this.immagine = immagine;
        this.descrizione = descrizione;
        this.atleti = atleti;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSportDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Double getLatGPS() {
        return latGPS;
    }

    public void setLatGPS(Double latGPS) {
        this.latGPS = latGPS;
    }

    public Double getLngGPS() {
        return lngGPS;
    }

    public void setLngGPS(Double lngGPS) {
        this.lngGPS = lngGPS;
    }

    public byte[] getImmagine() {
        return immagine;
    }

    public void setImmagine(byte[] immagine) {
        this.immagine = immagine;
    }

    public String getDescrizione() {
        return descrizione;
    }

    public void setDescrizione(String descrizione) {
        this.descrizione = descrizione;
    }

    public Long getAtleti() {
        return atleti;
    }

    public void setAtleti(Long atleti) {
        this.atleti = atleti;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public synchronized List<Atleta> getAtletaList() {
        if (atletaList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AtletaDao targetDao = daoSession.getAtletaDao();
            atletaList = targetDao._querySport_AtletaList(id);
        }
        return atletaList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAtletaList() {
        atletaList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
