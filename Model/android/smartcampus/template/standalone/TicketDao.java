package android.smartcampus.template.standalone;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import android.smartcampus.template.standalone.Ticket;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TICKET.
*/
public class TicketDao extends AbstractDao<Ticket, Void> {

    public static final String TABLENAME = "TICKET";

    /**
     * Properties of entity Ticket.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property LatGPS = new Property(0, Double.class, "latGPS", false, "LAT_GPS");
        public final static Property LngGPS = new Property(1, Double.class, "lngGPS", false, "LNG_GPS");
        public final static Property Descrizione = new Property(2, String.class, "descrizione", false, "DESCRIZIONE");
        public final static Property Categoria = new Property(3, String.class, "categoria", false, "CATEGORIA");
        public final static Property Foto = new Property(4, String.class, "foto", false, "FOTO");
    };


    public TicketDao(DaoConfig config) {
        super(config);
    }
    
    public TicketDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TICKET' (" + //
                "'LAT_GPS' REAL," + // 0: latGPS
                "'LNG_GPS' REAL," + // 1: lngGPS
                "'DESCRIZIONE' TEXT," + // 2: descrizione
                "'CATEGORIA' TEXT," + // 3: categoria
                "'FOTO' TEXT);"); // 4: foto
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TICKET'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Ticket entity) {
        stmt.clearBindings();
 
        Double latGPS = entity.getLatGPS();
        if (latGPS != null) {
            stmt.bindDouble(1, latGPS);
        }
 
        Double lngGPS = entity.getLngGPS();
        if (lngGPS != null) {
            stmt.bindDouble(2, lngGPS);
        }
 
        String descrizione = entity.getDescrizione();
        if (descrizione != null) {
            stmt.bindString(3, descrizione);
        }
 
        String categoria = entity.getCategoria();
        if (categoria != null) {
            stmt.bindString(4, categoria);
        }
 
        String foto = entity.getFoto();
        if (foto != null) {
            stmt.bindString(5, foto);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Ticket readEntity(Cursor cursor, int offset) {
        Ticket entity = new Ticket( //
            cursor.isNull(offset + 0) ? null : cursor.getDouble(offset + 0), // latGPS
            cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1), // lngGPS
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // descrizione
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // categoria
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // foto
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Ticket entity, int offset) {
        entity.setLatGPS(cursor.isNull(offset + 0) ? null : cursor.getDouble(offset + 0));
        entity.setLngGPS(cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1));
        entity.setDescrizione(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCategoria(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFoto(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Ticket entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Ticket entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
