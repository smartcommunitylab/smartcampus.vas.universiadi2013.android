package android.smartcampus.template.standalone;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import android.smartcampus.template.standalone.Evento;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table EVENTO.
*/
public class EventoDao extends AbstractDao<Evento, Long> {

    public static final String TABLENAME = "EVENTO";

    /**
     * Properties of entity Evento.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "ID");
        public final static Property Nome = new Property(1, String.class, "nome", false, "NOME");
        public final static Property Data = new Property(2, java.util.Date.class, "data", false, "DATA");
        public final static Property Immagine = new Property(3, byte[].class, "immagine", false, "IMMAGINE");
        public final static Property LatGPS = new Property(4, Double.class, "latGPS", false, "LAT_GPS");
        public final static Property LngGPS = new Property(5, Double.class, "lngGPS", false, "LNG_GPS");
        public final static Property Indirizzo = new Property(6, String.class, "indirizzo", false, "INDIRIZZO");
        public final static Property Descrizione = new Property(7, String.class, "descrizione", false, "DESCRIZIONE");
        public final static Property Ruolo = new Property(8, Integer.class, "ruolo", false, "RUOLO");
        public final static Property Ambito = new Property(9, String.class, "ambito", false, "AMBITO");
    };


    public EventoDao(DaoConfig config) {
        super(config);
    }
    
    public EventoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'EVENTO' (" + //
                "'ID' INTEGER PRIMARY KEY ," + // 0: ID
                "'NOME' TEXT," + // 1: nome
                "'DATA' INTEGER," + // 2: data
                "'IMMAGINE' BLOB," + // 3: immagine
                "'LAT_GPS' REAL," + // 4: latGPS
                "'LNG_GPS' REAL," + // 5: lngGPS
                "'INDIRIZZO' TEXT," + // 6: indirizzo
                "'DESCRIZIONE' TEXT," + // 7: descrizione
                "'RUOLO' INTEGER," + // 8: ruolo
                "'AMBITO' TEXT);"); // 9: ambito
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'EVENTO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Evento entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String nome = entity.getNome();
        if (nome != null) {
            stmt.bindString(2, nome);
        }
 
        java.util.Date data = entity.getData();
        if (data != null) {
            stmt.bindLong(3, data.getTime());
        }
 
        byte[] immagine = entity.getImmagine();
        if (immagine != null) {
            stmt.bindBlob(4, immagine);
        }
 
        Double latGPS = entity.getLatGPS();
        if (latGPS != null) {
            stmt.bindDouble(5, latGPS);
        }
 
        Double lngGPS = entity.getLngGPS();
        if (lngGPS != null) {
            stmt.bindDouble(6, lngGPS);
        }
 
        String indirizzo = entity.getIndirizzo();
        if (indirizzo != null) {
            stmt.bindString(7, indirizzo);
        }
 
        String descrizione = entity.getDescrizione();
        if (descrizione != null) {
            stmt.bindString(8, descrizione);
        }
 
        Integer ruolo = entity.getRuolo();
        if (ruolo != null) {
            stmt.bindLong(9, ruolo);
        }
 
        String ambito = entity.getAmbito();
        if (ambito != null) {
            stmt.bindString(10, ambito);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Evento readEntity(Cursor cursor, int offset) {
        Evento entity = new Evento( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nome
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // data
            cursor.isNull(offset + 3) ? null : cursor.getBlob(offset + 3), // immagine
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // latGPS
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // lngGPS
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // indirizzo
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // descrizione
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // ruolo
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // ambito
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Evento entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNome(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setData(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setImmagine(cursor.isNull(offset + 3) ? null : cursor.getBlob(offset + 3));
        entity.setLatGPS(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setLngGPS(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setIndirizzo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDescrizione(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRuolo(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setAmbito(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Evento entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Evento entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
