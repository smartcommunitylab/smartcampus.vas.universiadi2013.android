package android.smartcampus.template.standalone;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import android.smartcampus.template.standalone.Evento;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table EVENTO.
 */
public class EventoDao extends AbstractDao<Evento, Long> {

	public static final String TABLENAME = "EVENTO";

	/**
	 * Properties of entity Evento.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property Id = new Property(0, Long.class, "id",
				true, "_id");
		public final static Property Nome = new Property(1, String.class,
				"nome", false, "NOME");
		public final static Property Data = new Property(2, Long.class, "data",
				false, "DATA");
		public final static Property Descrizione = new Property(3,
				String.class, "descrizione", false, "DESCRIZIONE");
		public final static Property LatGPS = new Property(4, Double.class,
				"latGPS", false, "LAT_GPS");
		public final static Property LngGPS = new Property(5, Double.class,
				"lngGPS", false, "LNG_GPS");
		public final static Property TipoSport = new Property(6, String.class,
				"tipoSport", false, "TIPO_SPORT");
	};

	public EventoDao(DaoConfig config) {
		super(config);
	}

	public EventoDao(DaoConfig config, DaoSession daoSession) {
		super(config, daoSession);
	}

	/** Creates the underlying database table. */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "'EVENTO' (" + //
				"'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
				"'NOME' TEXT," + // 1: nome
				"'DATA' INTEGER," + // 2: data
				"'DESCRIZIONE' TEXT," + // 3: descrizione
				"'LAT_GPS' REAL," + // 4: latGPS
				"'LNG_GPS' REAL," + // 5: lngGPS
				"'TIPO_SPORT' TEXT);"); // 6: tipoSport
	}

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "")
				+ "'EVENTO'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, Evento entity) {
		stmt.clearBindings();

		Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}

		String nome = entity.getNome();
		if (nome != null) {
			stmt.bindString(2, nome);
		}

		Long data = entity.getData();
		if (data != null) {
			stmt.bindLong(3, data);
		}

		String descrizione = entity.getDescrizione();
		if (descrizione != null) {
			stmt.bindString(4, descrizione);
		}

		Double latGPS = entity.getLatGPS();
		if (latGPS != null) {
			stmt.bindDouble(5, latGPS);
		}

		Double lngGPS = entity.getLngGPS();
		if (lngGPS != null) {
			stmt.bindDouble(6, lngGPS);
		}

		String tipoSport = entity.getTipoSport();
		if (tipoSport != null) {
			stmt.bindString(7, tipoSport);
		}
	}

	/** @inheritdoc */
	@Override
	public Long readKey(Cursor cursor, int offset) {
		return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
	}

	/** @inheritdoc */
	@Override
	public Evento readEntity(Cursor cursor, int offset) {
		Evento entity = new Evento(
				//
				cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
				cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nome
				cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // data
				cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // descrizione
				cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // latGPS
				cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // lngGPS
				cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // tipoSport
				cursor.isNull(offset + 7) ? null : null // urlImage
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, Evento entity, int offset) {
		entity.setId(cursor.isNull(offset + 0) ? null : cursor
				.getLong(offset + 0));
		entity.setNome(cursor.isNull(offset + 1) ? null : cursor
				.getString(offset + 1));
		entity.setData(cursor.isNull(offset + 2) ? null : cursor
				.getLong(offset + 2));
		entity.setDescrizione(cursor.isNull(offset + 3) ? null : cursor
				.getString(offset + 3));
		entity.setLatGPS(cursor.isNull(offset + 4) ? null : cursor
				.getDouble(offset + 4));
		entity.setLngGPS(cursor.isNull(offset + 5) ? null : cursor
				.getDouble(offset + 5));
		entity.setTipoSport(cursor.isNull(offset + 6) ? null : cursor
				.getString(offset + 6));
	}

	/** @inheritdoc */
	@Override
	protected Long updateKeyAfterInsert(Evento entity, long rowId) {
		entity.setId(rowId);
		return rowId;
	}

	/** @inheritdoc */
	@Override
	public Long getKey(Evento entity) {
		if (entity != null) {
			return entity.getId();
		} else {
			return null;
		}
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

}
