package android.smartcampus.template.standalone;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import android.smartcampus.template.standalone.POI;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table POI.
*/
public class POIDao extends AbstractDao<POI, Long> {

    public static final String TABLENAME = "POI";

    /**
     * Properties of entity POI.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Nome = new Property(1, String.class, "nome", false, "NOME");
        public final static Property Categoria = new Property(2, String.class, "categoria", false, "CATEGORIA");
        public final static Property LatGPS = new Property(3, Double.class, "latGPS", false, "LAT_GPS");
        public final static Property LngGPS = new Property(4, Double.class, "lngGPS", false, "LNG_GPS");
    };


    public POIDao(DaoConfig config) {
        super(config);
    }
    
    public POIDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'POI' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'NOME' TEXT," + // 1: nome
                "'CATEGORIA' TEXT," + // 2: categoria
                "'LAT_GPS' REAL," + // 3: latGPS
                "'LNG_GPS' REAL);"); // 4: lngGPS
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'POI'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, POI entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nome = entity.getNome();
        if (nome != null) {
            stmt.bindString(2, nome);
        }
 
        String categoria = entity.getCategoria();
        if (categoria != null) {
            stmt.bindString(3, categoria);
        }
 
        Double latGPS = entity.getLatGPS();
        if (latGPS != null) {
            stmt.bindDouble(4, latGPS);
        }
 
        Double lngGPS = entity.getLngGPS();
        if (lngGPS != null) {
            stmt.bindDouble(5, lngGPS);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public POI readEntity(Cursor cursor, int offset) {
        POI entity = new POI( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nome
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // categoria
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // latGPS
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4) // lngGPS
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, POI entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNome(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCategoria(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLatGPS(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setLngGPS(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(POI entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(POI entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
