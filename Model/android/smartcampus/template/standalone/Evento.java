package android.smartcampus.template.standalone;

import java.util.List;
import android.smartcampus.template.standalone.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table EVENTO.
 */
public class Evento {

    private Long id;
    private String nome;
    private java.util.Date data;
    private byte[] immagine;
    private Double latGPS;
    private Double lngGPS;
    private String prezzo;
    private String tipologia;
    private Long partecipanti;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient EventoDao myDao;

    private List<Atleta> atletaList;

    public Evento() {
    }

    public Evento(Long id) {
        this.id = id;
    }

    public Evento(Long id, String nome, java.util.Date data, byte[] immagine, Double latGPS, Double lngGPS, String prezzo, String tipologia, Long partecipanti) {
        this.id = id;
        this.nome = nome;
        this.data = data;
        this.immagine = immagine;
        this.latGPS = latGPS;
        this.lngGPS = lngGPS;
        this.prezzo = prezzo;
        this.tipologia = tipologia;
        this.partecipanti = partecipanti;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getEventoDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getNome() {
        return nome;
    }

    public void setNome(String nome) {
        this.nome = nome;
    }

    public java.util.Date getData() {
        return data;
    }

    public void setData(java.util.Date data) {
        this.data = data;
    }

    public byte[] getImmagine() {
        return immagine;
    }

    public void setImmagine(byte[] immagine) {
        this.immagine = immagine;
    }

    public Double getLatGPS() {
        return latGPS;
    }

    public void setLatGPS(Double latGPS) {
        this.latGPS = latGPS;
    }

    public Double getLngGPS() {
        return lngGPS;
    }

    public void setLngGPS(Double lngGPS) {
        this.lngGPS = lngGPS;
    }

    public String getPrezzo() {
        return prezzo;
    }

    public void setPrezzo(String prezzo) {
        this.prezzo = prezzo;
    }

    public String getTipologia() {
        return tipologia;
    }

    public void setTipologia(String tipologia) {
        this.tipologia = tipologia;
    }

    public Long getPartecipanti() {
        return partecipanti;
    }

    public void setPartecipanti(Long partecipanti) {
        this.partecipanti = partecipanti;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public synchronized List<Atleta> getAtletaList() {
        if (atletaList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AtletaDao targetDao = daoSession.getAtletaDao();
            atletaList = targetDao._queryEvento_AtletaList(id);
        }
        return atletaList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAtletaList() {
        atletaList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
