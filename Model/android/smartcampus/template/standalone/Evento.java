package android.smartcampus.template.standalone;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URL;
import java.util.ArrayList;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.text.Html;

import smartcampus.android.template.universiadi.R;
import smartcampus.android.template.standalone.Utilities.ElementDescRoute;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table EVENTO.
 */
public class Evento {

	private Long id;
	private String nome;
	private Long data;
	private String descrizione;
	private Double latGPS;
	private Double lngGPS;
	private String tipoSport;

	private ArrayList<ElementDescRoute> routeTestuale = null;
	private String indirizzo = null;

	public Evento() {
	}

	public Evento(Long id) {
		this.id = id;
	}

	public Evento(Long id, String nome, Long data, String descrizione,
			Double latGPS, Double lngGPS, String tipoSport) {
		this.id = id;
		this.nome = nome;
		this.data = data;
		this.descrizione = descrizione;
		this.latGPS = latGPS;
		this.lngGPS = lngGPS;
		this.tipoSport = tipoSport;
	}

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getNome() {
		return nome;
	}

	public void setNome(String nome) {
		this.nome = nome;
	}

	public Long getData() {
		return data;
	}

	public void setData(Long data) {
		this.data = data;
	}

	public String getDescrizione() {
		return descrizione;
	}

	public void setDescrizione(String descrizione) {
		this.descrizione = descrizione;
	}

	public Double getLatGPS() {
		return latGPS;
	}

	public void setLatGPS(Double latGPS) {
		this.latGPS = latGPS;
	}

	public Double getLngGPS() {
		return lngGPS;
	}

	public void setLngGPS(Double lngGPS) {
		this.lngGPS = lngGPS;
	}

	public String getTipoSport() {
		return tipoSport;
	}

	public void setTipoSport(String tipoSport) {
		this.tipoSport = tipoSport;
	}

	public ArrayList<ElementDescRoute> getRouteTestuale(double[] source) {
		return (routeTestuale == null) ? parseGoogleDescRoute(source,
				new double[] { getLatGPS(), getLngGPS() }) : routeTestuale;
	}

	public String getIndirizzo() {
		return (indirizzo == null) ? reverseGeoCoding() : indirizzo;
	}

	private String reverseGeoCoding() {
		try {

			URL url = new URL(
					"http://maps.googleapis.com/maps/api/geocode/json?latlng="
							+ getLatGPS() + "," + getLngGPS() + "&sensor=true");
			HttpURLConnection conn = (HttpURLConnection) url.openConnection();
			conn.setRequestMethod("GET");
			conn.setRequestProperty("Accept", "application/json");

			if (conn.getResponseCode() != 200) {
				throw new RuntimeException("Failed : HTTP error code : "
						+ conn.getResponseCode());
			}

			BufferedReader br = new BufferedReader(new InputStreamReader(
					(conn.getInputStream())));

			String line = "";
			String output = "";
			while ((line = br.readLine()) != null) {
				output = output + line;
			}

			conn.disconnect();

			indirizzo = new JSONObject(output).getJSONArray("results")
					.getJSONObject(0).getString("formatted_address");
			return indirizzo;

		} catch (MalformedURLException e) {

			e.printStackTrace();

		} catch (IOException e) {

			e.printStackTrace();

		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return null;
	}

	private ArrayList<ElementDescRoute> parseGoogleDescRoute(
			double[] gpsSource, double[] gpsDest) {
		URL url;
		try {
			String srcGPS = gpsSource[0] + "," + gpsSource[1];
			String destGPS = gpsDest[0] + "," + gpsDest[1];
			String path = "http://maps.googleapis.com/maps/api/directions/json?origin="
					+ srcGPS
					+ "&destination="
					+ destGPS
					+ "&sensor=false&language=it";
			url = new URL(path);
			HttpURLConnection conn = (HttpURLConnection) url.openConnection();
			conn.setRequestMethod("GET");
			conn.setRequestProperty("Accept", "application/json");

			if (conn.getResponseCode() != 200) {
				throw new RuntimeException("Failed : HTTP error code : "
						+ conn.getResponseCode());
			}

			BufferedReader br = new BufferedReader(new InputStreamReader(
					(conn.getInputStream())));

			String line = "";
			String output = "";
			System.out.println("Output from Server .... \n");
			while ((line = br.readLine()) != null) {
				output = output + line;
			}

			conn.disconnect();

			JSONObject object = new JSONObject(output);

			ArrayList<ElementDescRoute> result = new ArrayList<ElementDescRoute>();
			// Get routes
			JSONArray legs = object.getJSONArray("routes").getJSONObject(0)
					.getJSONArray("legs");
			JSONObject leg = legs.getJSONObject(0);
			result.add(new ElementDescRoute(leg.getJSONObject("distance")
					.getString("text"), leg.getJSONObject("duration")
					.getString("text"), leg.getString("end_address"), -1));

			JSONArray steps = leg.getJSONArray("steps");

			for (int j = 0; j < steps.length(); j++) {
				int img = -1;
				JSONObject step = steps.getJSONObject(j);
				try {
					String man = step.getString("maneuver");
					if (man.equals("turn-right"))
						img = R.drawable.turn_right;
					if (man.equals("turn-left"))
						img = R.drawable.turn_left;
					if (man.equals("merge"))
						img = R.drawable.enter;
					if (man.equals("ramp-right"))
						img = R.drawable.out_right;
					if (man.equals("ramp-left"))
						img = R.drawable.out_left;
					if (man.equals("fork-right"))
						img = R.drawable.turn_right_little;
					if (man.equals("fork-left"))
						img = R.drawable.turn_left_little;
				} catch (JSONException e) {
				}

				String desc = Html
						.fromHtml(step.getString("html_instructions"))
						.toString();
				desc.replace("\n", "");
				result.add(new ElementDescRoute(step.getJSONObject("distance")
						.getString("text"), step.getJSONObject("duration")
						.getString("text"), desc, img));
			}

			routeTestuale = result;
			return result;
		} catch (JSONException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (MalformedURLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (ProtocolException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		return null;
	}

}
