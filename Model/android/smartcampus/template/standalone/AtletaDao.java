package android.smartcampus.template.standalone;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.Query;
import de.greenrobot.dao.QueryBuilder;

import android.smartcampus.template.standalone.Atleta;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ATLETA.
*/
public class AtletaDao extends AbstractDao<Atleta, Long> {

    public static final String TABLENAME = "ATLETA";

    /**
     * Properties of entity Atleta.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Nome = new Property(1, String.class, "nome", false, "NOME");
        public final static Property Cognome = new Property(2, String.class, "cognome", false, "COGNOME");
        public final static Property Nazionalita = new Property(3, String.class, "nazionalita", false, "NAZIONALITA");
        public final static Property Partecipanti = new Property(4, Long.class, "partecipanti", false, "PARTECIPANTI");
        public final static Property Atleti = new Property(5, Long.class, "atleti", false, "ATLETI");
    };

    private Query<Atleta> evento_AtletaListQuery;
    private Query<Atleta> sport_AtletaListQuery;

    public AtletaDao(DaoConfig config) {
        super(config);
    }
    
    public AtletaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ATLETA' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NOME' TEXT," + // 1: nome
                "'COGNOME' TEXT," + // 2: cognome
                "'NAZIONALITA' TEXT," + // 3: nazionalita
                "'PARTECIPANTI' INTEGER," + // 4: partecipanti
                "'ATLETI' INTEGER);"); // 5: atleti
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ATLETA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Atleta entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nome = entity.getNome();
        if (nome != null) {
            stmt.bindString(2, nome);
        }
 
        String cognome = entity.getCognome();
        if (cognome != null) {
            stmt.bindString(3, cognome);
        }
 
        String nazionalita = entity.getNazionalita();
        if (nazionalita != null) {
            stmt.bindString(4, nazionalita);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Atleta readEntity(Cursor cursor, int offset) {
        Atleta entity = new Atleta( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nome
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cognome
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // nazionalita
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Atleta entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNome(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCognome(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNazionalita(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Atleta entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Atleta entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "atletaList" to-many relationship of Evento. */
    public synchronized List<Atleta> _queryEvento_AtletaList(Long partecipanti) {
        if (evento_AtletaListQuery == null) {
            QueryBuilder<Atleta> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.Partecipanti.eq(partecipanti));
            evento_AtletaListQuery = queryBuilder.build();
        } else {
            evento_AtletaListQuery.setParameter(0, partecipanti);
        }
        return evento_AtletaListQuery.list();
    }

    /** Internal query to resolve the "atletaList" to-many relationship of Sport. */
    public synchronized List<Atleta> _querySport_AtletaList(Long atleti) {
        if (sport_AtletaListQuery == null) {
            QueryBuilder<Atleta> queryBuilder = queryBuilder();
            queryBuilder.where(Properties.Atleti.eq(atleti));
            sport_AtletaListQuery = queryBuilder.build();
        } else {
            sport_AtletaListQuery.setParameter(0, atleti);
        }
        return sport_AtletaListQuery.list();
    }

}
